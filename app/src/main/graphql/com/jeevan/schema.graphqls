# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: query_root
    mutation: mutation_root
    subscription: subscription_root
}

"columns and relationships of \"direct\""
type direct {
    "An array relationship"
    direct_tasks(
        "distinct select on columns"
        distinct_on: [direct_task_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [direct_task_order_by!],
        "filter the rows returned"
        where: direct_task_bool_exp
    ): [direct_task!]!
    "An aggregate relationship"
    direct_tasks_aggregate(
        "distinct select on columns"
        distinct_on: [direct_task_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [direct_task_order_by!],
        "filter the rows returned"
        where: direct_task_bool_exp
    ): direct_task_aggregate!
    "An array relationship"
    direct_workspace_users(
        "distinct select on columns"
        distinct_on: [direct_workspace_user_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [direct_workspace_user_order_by!],
        "filter the rows returned"
        where: direct_workspace_user_bool_exp
    ): [direct_workspace_user!]!
    "An aggregate relationship"
    direct_workspace_users_aggregate(
        "distinct select on columns"
        distinct_on: [direct_workspace_user_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [direct_workspace_user_order_by!],
        "filter the rows returned"
        where: direct_workspace_user_bool_exp
    ): direct_workspace_user_aggregate!
    id: uuid!
}

"aggregated selection of \"direct\""
type direct_aggregate {
    aggregate: direct_aggregate_fields
    nodes: [direct!]!
}

"aggregate fields of \"direct\""
type direct_aggregate_fields {
    count(columns: [direct_select_column!], distinct: Boolean): Int!
    max: direct_max_fields
    min: direct_min_fields
}

"aggregate max on columns"
type direct_max_fields {
    id: uuid
}

"aggregate min on columns"
type direct_min_fields {
    id: uuid
}

"response of any mutation on the table \"direct\""
type direct_mutation_response {
    "number of rows affected by the mutation"
    affected_rows: Int!
    "data from the rows affected by the mutation"
    returning: [direct!]!
}

"columns and relationships of \"direct_task\""
type direct_task {
    "An object relationship"
    direct: direct!
    direct_id: uuid!
    "An object relationship"
    task: task!
    task_id: uuid!
}

"aggregated selection of \"direct_task\""
type direct_task_aggregate {
    aggregate: direct_task_aggregate_fields
    nodes: [direct_task!]!
}

"aggregate fields of \"direct_task\""
type direct_task_aggregate_fields {
    count(columns: [direct_task_select_column!], distinct: Boolean): Int!
    max: direct_task_max_fields
    min: direct_task_min_fields
}

"aggregate max on columns"
type direct_task_max_fields {
    direct_id: uuid
    task_id: uuid
}

"aggregate min on columns"
type direct_task_min_fields {
    direct_id: uuid
    task_id: uuid
}

"response of any mutation on the table \"direct_task\""
type direct_task_mutation_response {
    "number of rows affected by the mutation"
    affected_rows: Int!
    "data from the rows affected by the mutation"
    returning: [direct_task!]!
}

"columns and relationships of \"direct_workspace_user\""
type direct_workspace_user {
    "An object relationship"
    direct: direct!
    direct_id: uuid!
    "An object relationship"
    user_1: user!
    "An object relationship"
    user_2: user!
    user_id_1: String!
    user_id_2: String!
    "An object relationship"
    workspace: workspace!
    workspace_id: uuid!
}

"aggregated selection of \"direct_workspace_user\""
type direct_workspace_user_aggregate {
    aggregate: direct_workspace_user_aggregate_fields
    nodes: [direct_workspace_user!]!
}

"aggregate fields of \"direct_workspace_user\""
type direct_workspace_user_aggregate_fields {
    count(columns: [direct_workspace_user_select_column!], distinct: Boolean): Int!
    max: direct_workspace_user_max_fields
    min: direct_workspace_user_min_fields
}

"aggregate max on columns"
type direct_workspace_user_max_fields {
    direct_id: uuid
    user_id_1: String
    user_id_2: String
    workspace_id: uuid
}

"aggregate min on columns"
type direct_workspace_user_min_fields {
    direct_id: uuid
    user_id_1: String
    user_id_2: String
    workspace_id: uuid
}

"response of any mutation on the table \"direct_workspace_user\""
type direct_workspace_user_mutation_response {
    "number of rows affected by the mutation"
    affected_rows: Int!
    "data from the rows affected by the mutation"
    returning: [direct_workspace_user!]!
}

"columns and relationships of \"group\""
type group {
    "An array relationship"
    group_tasks(
        "distinct select on columns"
        distinct_on: [group_task_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [group_task_order_by!],
        "filter the rows returned"
        where: group_task_bool_exp
    ): [group_task!]!
    "An aggregate relationship"
    group_tasks_aggregate(
        "distinct select on columns"
        distinct_on: [group_task_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [group_task_order_by!],
        "filter the rows returned"
        where: group_task_bool_exp
    ): group_task_aggregate!
    "An array relationship"
    group_users(
        "distinct select on columns"
        distinct_on: [group_user_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [group_user_order_by!],
        "filter the rows returned"
        where: group_user_bool_exp
    ): [group_user!]!
    "An aggregate relationship"
    group_users_aggregate(
        "distinct select on columns"
        distinct_on: [group_user_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [group_user_order_by!],
        "filter the rows returned"
        where: group_user_bool_exp
    ): group_user_aggregate!
    id: uuid!
    name: String!
    "An object relationship"
    workspace: workspace!
    workspace_id: uuid!
}

"aggregated selection of \"group\""
type group_aggregate {
    aggregate: group_aggregate_fields
    nodes: [group!]!
}

"aggregate fields of \"group\""
type group_aggregate_fields {
    count(columns: [group_select_column!], distinct: Boolean): Int!
    max: group_max_fields
    min: group_min_fields
}

"aggregate max on columns"
type group_max_fields {
    id: uuid
    name: String
    workspace_id: uuid
}

"aggregate min on columns"
type group_min_fields {
    id: uuid
    name: String
    workspace_id: uuid
}

"response of any mutation on the table \"group\""
type group_mutation_response {
    "number of rows affected by the mutation"
    affected_rows: Int!
    "data from the rows affected by the mutation"
    returning: [group!]!
}

"columns and relationships of \"group_task\""
type group_task {
    "An object relationship"
    group: group!
    group_id: uuid!
    "An object relationship"
    task: task!
    task_id: uuid!
}

"aggregated selection of \"group_task\""
type group_task_aggregate {
    aggregate: group_task_aggregate_fields
    nodes: [group_task!]!
}

"aggregate fields of \"group_task\""
type group_task_aggregate_fields {
    count(columns: [group_task_select_column!], distinct: Boolean): Int!
    max: group_task_max_fields
    min: group_task_min_fields
}

"aggregate max on columns"
type group_task_max_fields {
    group_id: uuid
    task_id: uuid
}

"aggregate min on columns"
type group_task_min_fields {
    group_id: uuid
    task_id: uuid
}

"response of any mutation on the table \"group_task\""
type group_task_mutation_response {
    "number of rows affected by the mutation"
    affected_rows: Int!
    "data from the rows affected by the mutation"
    returning: [group_task!]!
}

"columns and relationships of \"group_user\""
type group_user {
    "An object relationship"
    group: group!
    group_id: uuid!
    "An object relationship"
    user: user!
    user_id: String!
}

"aggregated selection of \"group_user\""
type group_user_aggregate {
    aggregate: group_user_aggregate_fields
    nodes: [group_user!]!
}

"aggregate fields of \"group_user\""
type group_user_aggregate_fields {
    count(columns: [group_user_select_column!], distinct: Boolean): Int!
    max: group_user_max_fields
    min: group_user_min_fields
}

"aggregate max on columns"
type group_user_max_fields {
    group_id: uuid
    user_id: String
}

"aggregate min on columns"
type group_user_min_fields {
    group_id: uuid
    user_id: String
}

"response of any mutation on the table \"group_user\""
type group_user_mutation_response {
    "number of rows affected by the mutation"
    affected_rows: Int!
    "data from the rows affected by the mutation"
    returning: [group_user!]!
}

"mutation root"
type mutation_root {
    "delete data from the table: \"direct\""
    delete_direct(
        "filter the rows which have to be deleted"
        where: direct_bool_exp!
    ): direct_mutation_response
    "delete single row from the table: \"direct\""
    delete_direct_by_pk(id: uuid!): direct
    "delete data from the table: \"direct_task\""
    delete_direct_task(
        "filter the rows which have to be deleted"
        where: direct_task_bool_exp!
    ): direct_task_mutation_response
    "delete single row from the table: \"direct_task\""
    delete_direct_task_by_pk(direct_id: uuid!, task_id: uuid!): direct_task
    "delete data from the table: \"direct_workspace_user\""
    delete_direct_workspace_user(
        "filter the rows which have to be deleted"
        where: direct_workspace_user_bool_exp!
    ): direct_workspace_user_mutation_response
    "delete single row from the table: \"direct_workspace_user\""
    delete_direct_workspace_user_by_pk(user_id_1: String!, user_id_2: String!, workspace_id: uuid!): direct_workspace_user
    "delete data from the table: \"group\""
    delete_group(
        "filter the rows which have to be deleted"
        where: group_bool_exp!
    ): group_mutation_response
    "delete single row from the table: \"group\""
    delete_group_by_pk(id: uuid!): group
    "delete data from the table: \"group_task\""
    delete_group_task(
        "filter the rows which have to be deleted"
        where: group_task_bool_exp!
    ): group_task_mutation_response
    "delete single row from the table: \"group_task\""
    delete_group_task_by_pk(group_id: uuid!, task_id: uuid!): group_task
    "delete data from the table: \"group_user\""
    delete_group_user(
        "filter the rows which have to be deleted"
        where: group_user_bool_exp!
    ): group_user_mutation_response
    "delete single row from the table: \"group_user\""
    delete_group_user_by_pk(group_id: uuid!, user_id: String!): group_user
    "delete data from the table: \"task\""
    delete_task(
        "filter the rows which have to be deleted"
        where: task_bool_exp!
    ): task_mutation_response
    "delete single row from the table: \"task\""
    delete_task_by_pk(id: uuid!): task
    "delete data from the table: \"user\""
    delete_user(
        "filter the rows which have to be deleted"
        where: user_bool_exp!
    ): user_mutation_response
    "delete single row from the table: \"user\""
    delete_user_by_pk(uid: String!): user
    "delete data from the table: \"workspace\""
    delete_workspace(
        "filter the rows which have to be deleted"
        where: workspace_bool_exp!
    ): workspace_mutation_response
    "delete single row from the table: \"workspace\""
    delete_workspace_by_pk(id: uuid!): workspace
    "delete data from the table: \"workspace_token\""
    delete_workspace_token(
        "filter the rows which have to be deleted"
        where: workspace_token_bool_exp!
    ): workspace_token_mutation_response
    "delete single row from the table: \"workspace_token\""
    delete_workspace_token_by_pk(id: uuid!): workspace_token
    "delete data from the table: \"workspace_user\""
    delete_workspace_user(
        "filter the rows which have to be deleted"
        where: workspace_user_bool_exp!
    ): workspace_user_mutation_response
    "delete single row from the table: \"workspace_user\""
    delete_workspace_user_by_pk(user_id: String!, workspace_id: uuid!): workspace_user
    "insert data into the table: \"direct\""
    insert_direct(
        "the rows to be inserted"
        objects: [direct_insert_input!]!,
        "on conflict condition"
        on_conflict: direct_on_conflict
    ): direct_mutation_response
    "insert a single row into the table: \"direct\""
    insert_direct_one(
        "the row to be inserted"
        object: direct_insert_input!,
        "on conflict condition"
        on_conflict: direct_on_conflict
    ): direct
    "insert data into the table: \"direct_task\""
    insert_direct_task(
        "the rows to be inserted"
        objects: [direct_task_insert_input!]!,
        "on conflict condition"
        on_conflict: direct_task_on_conflict
    ): direct_task_mutation_response
    "insert a single row into the table: \"direct_task\""
    insert_direct_task_one(
        "the row to be inserted"
        object: direct_task_insert_input!,
        "on conflict condition"
        on_conflict: direct_task_on_conflict
    ): direct_task
    "insert data into the table: \"direct_workspace_user\""
    insert_direct_workspace_user(
        "the rows to be inserted"
        objects: [direct_workspace_user_insert_input!]!,
        "on conflict condition"
        on_conflict: direct_workspace_user_on_conflict
    ): direct_workspace_user_mutation_response
    "insert a single row into the table: \"direct_workspace_user\""
    insert_direct_workspace_user_one(
        "the row to be inserted"
        object: direct_workspace_user_insert_input!,
        "on conflict condition"
        on_conflict: direct_workspace_user_on_conflict
    ): direct_workspace_user
    "insert data into the table: \"group\""
    insert_group(
        "the rows to be inserted"
        objects: [group_insert_input!]!,
        "on conflict condition"
        on_conflict: group_on_conflict
    ): group_mutation_response
    "insert a single row into the table: \"group\""
    insert_group_one(
        "the row to be inserted"
        object: group_insert_input!,
        "on conflict condition"
        on_conflict: group_on_conflict
    ): group
    "insert data into the table: \"group_task\""
    insert_group_task(
        "the rows to be inserted"
        objects: [group_task_insert_input!]!,
        "on conflict condition"
        on_conflict: group_task_on_conflict
    ): group_task_mutation_response
    "insert a single row into the table: \"group_task\""
    insert_group_task_one(
        "the row to be inserted"
        object: group_task_insert_input!,
        "on conflict condition"
        on_conflict: group_task_on_conflict
    ): group_task
    "insert data into the table: \"group_user\""
    insert_group_user(
        "the rows to be inserted"
        objects: [group_user_insert_input!]!,
        "on conflict condition"
        on_conflict: group_user_on_conflict
    ): group_user_mutation_response
    "insert a single row into the table: \"group_user\""
    insert_group_user_one(
        "the row to be inserted"
        object: group_user_insert_input!,
        "on conflict condition"
        on_conflict: group_user_on_conflict
    ): group_user
    "insert data into the table: \"task\""
    insert_task(
        "the rows to be inserted"
        objects: [task_insert_input!]!,
        "on conflict condition"
        on_conflict: task_on_conflict
    ): task_mutation_response
    "insert a single row into the table: \"task\""
    insert_task_one(
        "the row to be inserted"
        object: task_insert_input!,
        "on conflict condition"
        on_conflict: task_on_conflict
    ): task
    "insert data into the table: \"user\""
    insert_user(
        "the rows to be inserted"
        objects: [user_insert_input!]!,
        "on conflict condition"
        on_conflict: user_on_conflict
    ): user_mutation_response
    "insert a single row into the table: \"user\""
    insert_user_one(
        "the row to be inserted"
        object: user_insert_input!,
        "on conflict condition"
        on_conflict: user_on_conflict
    ): user
    "insert data into the table: \"workspace\""
    insert_workspace(
        "the rows to be inserted"
        objects: [workspace_insert_input!]!,
        "on conflict condition"
        on_conflict: workspace_on_conflict
    ): workspace_mutation_response
    "insert a single row into the table: \"workspace\""
    insert_workspace_one(
        "the row to be inserted"
        object: workspace_insert_input!,
        "on conflict condition"
        on_conflict: workspace_on_conflict
    ): workspace
    "insert data into the table: \"workspace_token\""
    insert_workspace_token(
        "the rows to be inserted"
        objects: [workspace_token_insert_input!]!,
        "on conflict condition"
        on_conflict: workspace_token_on_conflict
    ): workspace_token_mutation_response
    "insert a single row into the table: \"workspace_token\""
    insert_workspace_token_one(
        "the row to be inserted"
        object: workspace_token_insert_input!,
        "on conflict condition"
        on_conflict: workspace_token_on_conflict
    ): workspace_token
    "insert data into the table: \"workspace_user\""
    insert_workspace_user(
        "the rows to be inserted"
        objects: [workspace_user_insert_input!]!,
        "on conflict condition"
        on_conflict: workspace_user_on_conflict
    ): workspace_user_mutation_response
    "insert a single row into the table: \"workspace_user\""
    insert_workspace_user_one(
        "the row to be inserted"
        object: workspace_user_insert_input!,
        "on conflict condition"
        on_conflict: workspace_user_on_conflict
    ): workspace_user
    "update data of the table: \"direct\""
    update_direct(
        "sets the columns of the filtered rows to the given values"
        _set: direct_set_input,
        "filter the rows which have to be updated"
        where: direct_bool_exp!
    ): direct_mutation_response
    "update single row of the table: \"direct\""
    update_direct_by_pk(
        "sets the columns of the filtered rows to the given values"
        _set: direct_set_input,
        pk_columns: direct_pk_columns_input!
    ): direct
    "update data of the table: \"direct_task\""
    update_direct_task(
        "sets the columns of the filtered rows to the given values"
        _set: direct_task_set_input,
        "filter the rows which have to be updated"
        where: direct_task_bool_exp!
    ): direct_task_mutation_response
    "update single row of the table: \"direct_task\""
    update_direct_task_by_pk(
        "sets the columns of the filtered rows to the given values"
        _set: direct_task_set_input,
        pk_columns: direct_task_pk_columns_input!
    ): direct_task
    "update data of the table: \"direct_workspace_user\""
    update_direct_workspace_user(
        "sets the columns of the filtered rows to the given values"
        _set: direct_workspace_user_set_input,
        "filter the rows which have to be updated"
        where: direct_workspace_user_bool_exp!
    ): direct_workspace_user_mutation_response
    "update single row of the table: \"direct_workspace_user\""
    update_direct_workspace_user_by_pk(
        "sets the columns of the filtered rows to the given values"
        _set: direct_workspace_user_set_input,
        pk_columns: direct_workspace_user_pk_columns_input!
    ): direct_workspace_user
    "update data of the table: \"group\""
    update_group(
        "sets the columns of the filtered rows to the given values"
        _set: group_set_input,
        "filter the rows which have to be updated"
        where: group_bool_exp!
    ): group_mutation_response
    "update single row of the table: \"group\""
    update_group_by_pk(
        "sets the columns of the filtered rows to the given values"
        _set: group_set_input,
        pk_columns: group_pk_columns_input!
    ): group
    "update data of the table: \"group_task\""
    update_group_task(
        "sets the columns of the filtered rows to the given values"
        _set: group_task_set_input,
        "filter the rows which have to be updated"
        where: group_task_bool_exp!
    ): group_task_mutation_response
    "update single row of the table: \"group_task\""
    update_group_task_by_pk(
        "sets the columns of the filtered rows to the given values"
        _set: group_task_set_input,
        pk_columns: group_task_pk_columns_input!
    ): group_task
    "update data of the table: \"group_user\""
    update_group_user(
        "sets the columns of the filtered rows to the given values"
        _set: group_user_set_input,
        "filter the rows which have to be updated"
        where: group_user_bool_exp!
    ): group_user_mutation_response
    "update single row of the table: \"group_user\""
    update_group_user_by_pk(
        "sets the columns of the filtered rows to the given values"
        _set: group_user_set_input,
        pk_columns: group_user_pk_columns_input!
    ): group_user
    "update data of the table: \"task\""
    update_task(
        "increments the numeric columns with given value of the filtered values"
        _inc: task_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: task_set_input,
        "filter the rows which have to be updated"
        where: task_bool_exp!
    ): task_mutation_response
    "update single row of the table: \"task\""
    update_task_by_pk(
        "increments the numeric columns with given value of the filtered values"
        _inc: task_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: task_set_input,
        pk_columns: task_pk_columns_input!
    ): task
    "update data of the table: \"user\""
    update_user(
        "sets the columns of the filtered rows to the given values"
        _set: user_set_input,
        "filter the rows which have to be updated"
        where: user_bool_exp!
    ): user_mutation_response
    "update single row of the table: \"user\""
    update_user_by_pk(
        "sets the columns of the filtered rows to the given values"
        _set: user_set_input,
        pk_columns: user_pk_columns_input!
    ): user
    "update data of the table: \"workspace\""
    update_workspace(
        "sets the columns of the filtered rows to the given values"
        _set: workspace_set_input,
        "filter the rows which have to be updated"
        where: workspace_bool_exp!
    ): workspace_mutation_response
    "update single row of the table: \"workspace\""
    update_workspace_by_pk(
        "sets the columns of the filtered rows to the given values"
        _set: workspace_set_input,
        pk_columns: workspace_pk_columns_input!
    ): workspace
    "update data of the table: \"workspace_token\""
    update_workspace_token(
        "sets the columns of the filtered rows to the given values"
        _set: workspace_token_set_input,
        "filter the rows which have to be updated"
        where: workspace_token_bool_exp!
    ): workspace_token_mutation_response
    "update single row of the table: \"workspace_token\""
    update_workspace_token_by_pk(
        "sets the columns of the filtered rows to the given values"
        _set: workspace_token_set_input,
        pk_columns: workspace_token_pk_columns_input!
    ): workspace_token
    "update data of the table: \"workspace_user\""
    update_workspace_user(
        "sets the columns of the filtered rows to the given values"
        _set: workspace_user_set_input,
        "filter the rows which have to be updated"
        where: workspace_user_bool_exp!
    ): workspace_user_mutation_response
    "update single row of the table: \"workspace_user\""
    update_workspace_user_by_pk(
        "sets the columns of the filtered rows to the given values"
        _set: workspace_user_set_input,
        pk_columns: workspace_user_pk_columns_input!
    ): workspace_user
}

type query_root {
    "fetch data from the table: \"direct\""
    direct(
        "distinct select on columns"
        distinct_on: [direct_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [direct_order_by!],
        "filter the rows returned"
        where: direct_bool_exp
    ): [direct!]!
    "fetch aggregated fields from the table: \"direct\""
    direct_aggregate(
        "distinct select on columns"
        distinct_on: [direct_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [direct_order_by!],
        "filter the rows returned"
        where: direct_bool_exp
    ): direct_aggregate!
    "fetch data from the table: \"direct\" using primary key columns"
    direct_by_pk(id: uuid!): direct
    "fetch data from the table: \"direct_task\""
    direct_task(
        "distinct select on columns"
        distinct_on: [direct_task_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [direct_task_order_by!],
        "filter the rows returned"
        where: direct_task_bool_exp
    ): [direct_task!]!
    "fetch aggregated fields from the table: \"direct_task\""
    direct_task_aggregate(
        "distinct select on columns"
        distinct_on: [direct_task_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [direct_task_order_by!],
        "filter the rows returned"
        where: direct_task_bool_exp
    ): direct_task_aggregate!
    "fetch data from the table: \"direct_task\" using primary key columns"
    direct_task_by_pk(direct_id: uuid!, task_id: uuid!): direct_task
    "fetch data from the table: \"direct_workspace_user\""
    direct_workspace_user(
        "distinct select on columns"
        distinct_on: [direct_workspace_user_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [direct_workspace_user_order_by!],
        "filter the rows returned"
        where: direct_workspace_user_bool_exp
    ): [direct_workspace_user!]!
    "fetch aggregated fields from the table: \"direct_workspace_user\""
    direct_workspace_user_aggregate(
        "distinct select on columns"
        distinct_on: [direct_workspace_user_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [direct_workspace_user_order_by!],
        "filter the rows returned"
        where: direct_workspace_user_bool_exp
    ): direct_workspace_user_aggregate!
    "fetch data from the table: \"direct_workspace_user\" using primary key columns"
    direct_workspace_user_by_pk(user_id_1: String!, user_id_2: String!, workspace_id: uuid!): direct_workspace_user
    "fetch data from the table: \"group\""
    group(
        "distinct select on columns"
        distinct_on: [group_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [group_order_by!],
        "filter the rows returned"
        where: group_bool_exp
    ): [group!]!
    "fetch aggregated fields from the table: \"group\""
    group_aggregate(
        "distinct select on columns"
        distinct_on: [group_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [group_order_by!],
        "filter the rows returned"
        where: group_bool_exp
    ): group_aggregate!
    "fetch data from the table: \"group\" using primary key columns"
    group_by_pk(id: uuid!): group
    "fetch data from the table: \"group_task\""
    group_task(
        "distinct select on columns"
        distinct_on: [group_task_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [group_task_order_by!],
        "filter the rows returned"
        where: group_task_bool_exp
    ): [group_task!]!
    "fetch aggregated fields from the table: \"group_task\""
    group_task_aggregate(
        "distinct select on columns"
        distinct_on: [group_task_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [group_task_order_by!],
        "filter the rows returned"
        where: group_task_bool_exp
    ): group_task_aggregate!
    "fetch data from the table: \"group_task\" using primary key columns"
    group_task_by_pk(group_id: uuid!, task_id: uuid!): group_task
    "fetch data from the table: \"group_user\""
    group_user(
        "distinct select on columns"
        distinct_on: [group_user_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [group_user_order_by!],
        "filter the rows returned"
        where: group_user_bool_exp
    ): [group_user!]!
    "fetch aggregated fields from the table: \"group_user\""
    group_user_aggregate(
        "distinct select on columns"
        distinct_on: [group_user_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [group_user_order_by!],
        "filter the rows returned"
        where: group_user_bool_exp
    ): group_user_aggregate!
    "fetch data from the table: \"group_user\" using primary key columns"
    group_user_by_pk(group_id: uuid!, user_id: String!): group_user
    "fetch data from the table: \"task\""
    task(
        "distinct select on columns"
        distinct_on: [task_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [task_order_by!],
        "filter the rows returned"
        where: task_bool_exp
    ): [task!]!
    "fetch aggregated fields from the table: \"task\""
    task_aggregate(
        "distinct select on columns"
        distinct_on: [task_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [task_order_by!],
        "filter the rows returned"
        where: task_bool_exp
    ): task_aggregate!
    "fetch data from the table: \"task\" using primary key columns"
    task_by_pk(id: uuid!): task
    "fetch data from the table: \"user\""
    user(
        "distinct select on columns"
        distinct_on: [user_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [user_order_by!],
        "filter the rows returned"
        where: user_bool_exp
    ): [user!]!
    "fetch aggregated fields from the table: \"user\""
    user_aggregate(
        "distinct select on columns"
        distinct_on: [user_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [user_order_by!],
        "filter the rows returned"
        where: user_bool_exp
    ): user_aggregate!
    "fetch data from the table: \"user\" using primary key columns"
    user_by_pk(uid: String!): user
    "fetch data from the table: \"workspace\""
    workspace(
        "distinct select on columns"
        distinct_on: [workspace_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [workspace_order_by!],
        "filter the rows returned"
        where: workspace_bool_exp
    ): [workspace!]!
    "fetch aggregated fields from the table: \"workspace\""
    workspace_aggregate(
        "distinct select on columns"
        distinct_on: [workspace_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [workspace_order_by!],
        "filter the rows returned"
        where: workspace_bool_exp
    ): workspace_aggregate!
    "fetch data from the table: \"workspace\" using primary key columns"
    workspace_by_pk(id: uuid!): workspace
    "fetch data from the table: \"workspace_token\""
    workspace_token(
        "distinct select on columns"
        distinct_on: [workspace_token_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [workspace_token_order_by!],
        "filter the rows returned"
        where: workspace_token_bool_exp
    ): [workspace_token!]!
    "fetch aggregated fields from the table: \"workspace_token\""
    workspace_token_aggregate(
        "distinct select on columns"
        distinct_on: [workspace_token_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [workspace_token_order_by!],
        "filter the rows returned"
        where: workspace_token_bool_exp
    ): workspace_token_aggregate!
    "fetch data from the table: \"workspace_token\" using primary key columns"
    workspace_token_by_pk(id: uuid!): workspace_token
    "fetch data from the table: \"workspace_user\""
    workspace_user(
        "distinct select on columns"
        distinct_on: [workspace_user_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [workspace_user_order_by!],
        "filter the rows returned"
        where: workspace_user_bool_exp
    ): [workspace_user!]!
    "fetch aggregated fields from the table: \"workspace_user\""
    workspace_user_aggregate(
        "distinct select on columns"
        distinct_on: [workspace_user_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [workspace_user_order_by!],
        "filter the rows returned"
        where: workspace_user_bool_exp
    ): workspace_user_aggregate!
    "fetch data from the table: \"workspace_user\" using primary key columns"
    workspace_user_by_pk(user_id: String!, workspace_id: uuid!): workspace_user
}

type subscription_root {
    "fetch data from the table: \"direct\""
    direct(
        "distinct select on columns"
        distinct_on: [direct_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [direct_order_by!],
        "filter the rows returned"
        where: direct_bool_exp
    ): [direct!]!
    "fetch aggregated fields from the table: \"direct\""
    direct_aggregate(
        "distinct select on columns"
        distinct_on: [direct_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [direct_order_by!],
        "filter the rows returned"
        where: direct_bool_exp
    ): direct_aggregate!
    "fetch data from the table: \"direct\" using primary key columns"
    direct_by_pk(id: uuid!): direct
    "fetch data from the table: \"direct_task\""
    direct_task(
        "distinct select on columns"
        distinct_on: [direct_task_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [direct_task_order_by!],
        "filter the rows returned"
        where: direct_task_bool_exp
    ): [direct_task!]!
    "fetch aggregated fields from the table: \"direct_task\""
    direct_task_aggregate(
        "distinct select on columns"
        distinct_on: [direct_task_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [direct_task_order_by!],
        "filter the rows returned"
        where: direct_task_bool_exp
    ): direct_task_aggregate!
    "fetch data from the table: \"direct_task\" using primary key columns"
    direct_task_by_pk(direct_id: uuid!, task_id: uuid!): direct_task
    "fetch data from the table: \"direct_workspace_user\""
    direct_workspace_user(
        "distinct select on columns"
        distinct_on: [direct_workspace_user_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [direct_workspace_user_order_by!],
        "filter the rows returned"
        where: direct_workspace_user_bool_exp
    ): [direct_workspace_user!]!
    "fetch aggregated fields from the table: \"direct_workspace_user\""
    direct_workspace_user_aggregate(
        "distinct select on columns"
        distinct_on: [direct_workspace_user_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [direct_workspace_user_order_by!],
        "filter the rows returned"
        where: direct_workspace_user_bool_exp
    ): direct_workspace_user_aggregate!
    "fetch data from the table: \"direct_workspace_user\" using primary key columns"
    direct_workspace_user_by_pk(user_id_1: String!, user_id_2: String!, workspace_id: uuid!): direct_workspace_user
    "fetch data from the table: \"group\""
    group(
        "distinct select on columns"
        distinct_on: [group_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [group_order_by!],
        "filter the rows returned"
        where: group_bool_exp
    ): [group!]!
    "fetch aggregated fields from the table: \"group\""
    group_aggregate(
        "distinct select on columns"
        distinct_on: [group_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [group_order_by!],
        "filter the rows returned"
        where: group_bool_exp
    ): group_aggregate!
    "fetch data from the table: \"group\" using primary key columns"
    group_by_pk(id: uuid!): group
    "fetch data from the table: \"group_task\""
    group_task(
        "distinct select on columns"
        distinct_on: [group_task_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [group_task_order_by!],
        "filter the rows returned"
        where: group_task_bool_exp
    ): [group_task!]!
    "fetch aggregated fields from the table: \"group_task\""
    group_task_aggregate(
        "distinct select on columns"
        distinct_on: [group_task_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [group_task_order_by!],
        "filter the rows returned"
        where: group_task_bool_exp
    ): group_task_aggregate!
    "fetch data from the table: \"group_task\" using primary key columns"
    group_task_by_pk(group_id: uuid!, task_id: uuid!): group_task
    "fetch data from the table: \"group_user\""
    group_user(
        "distinct select on columns"
        distinct_on: [group_user_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [group_user_order_by!],
        "filter the rows returned"
        where: group_user_bool_exp
    ): [group_user!]!
    "fetch aggregated fields from the table: \"group_user\""
    group_user_aggregate(
        "distinct select on columns"
        distinct_on: [group_user_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [group_user_order_by!],
        "filter the rows returned"
        where: group_user_bool_exp
    ): group_user_aggregate!
    "fetch data from the table: \"group_user\" using primary key columns"
    group_user_by_pk(group_id: uuid!, user_id: String!): group_user
    "fetch data from the table: \"task\""
    task(
        "distinct select on columns"
        distinct_on: [task_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [task_order_by!],
        "filter the rows returned"
        where: task_bool_exp
    ): [task!]!
    "fetch aggregated fields from the table: \"task\""
    task_aggregate(
        "distinct select on columns"
        distinct_on: [task_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [task_order_by!],
        "filter the rows returned"
        where: task_bool_exp
    ): task_aggregate!
    "fetch data from the table: \"task\" using primary key columns"
    task_by_pk(id: uuid!): task
    "fetch data from the table: \"user\""
    user(
        "distinct select on columns"
        distinct_on: [user_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [user_order_by!],
        "filter the rows returned"
        where: user_bool_exp
    ): [user!]!
    "fetch aggregated fields from the table: \"user\""
    user_aggregate(
        "distinct select on columns"
        distinct_on: [user_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [user_order_by!],
        "filter the rows returned"
        where: user_bool_exp
    ): user_aggregate!
    "fetch data from the table: \"user\" using primary key columns"
    user_by_pk(uid: String!): user
    "fetch data from the table: \"workspace\""
    workspace(
        "distinct select on columns"
        distinct_on: [workspace_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [workspace_order_by!],
        "filter the rows returned"
        where: workspace_bool_exp
    ): [workspace!]!
    "fetch aggregated fields from the table: \"workspace\""
    workspace_aggregate(
        "distinct select on columns"
        distinct_on: [workspace_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [workspace_order_by!],
        "filter the rows returned"
        where: workspace_bool_exp
    ): workspace_aggregate!
    "fetch data from the table: \"workspace\" using primary key columns"
    workspace_by_pk(id: uuid!): workspace
    "fetch data from the table: \"workspace_token\""
    workspace_token(
        "distinct select on columns"
        distinct_on: [workspace_token_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [workspace_token_order_by!],
        "filter the rows returned"
        where: workspace_token_bool_exp
    ): [workspace_token!]!
    "fetch aggregated fields from the table: \"workspace_token\""
    workspace_token_aggregate(
        "distinct select on columns"
        distinct_on: [workspace_token_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [workspace_token_order_by!],
        "filter the rows returned"
        where: workspace_token_bool_exp
    ): workspace_token_aggregate!
    "fetch data from the table: \"workspace_token\" using primary key columns"
    workspace_token_by_pk(id: uuid!): workspace_token
    "fetch data from the table: \"workspace_user\""
    workspace_user(
        "distinct select on columns"
        distinct_on: [workspace_user_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [workspace_user_order_by!],
        "filter the rows returned"
        where: workspace_user_bool_exp
    ): [workspace_user!]!
    "fetch aggregated fields from the table: \"workspace_user\""
    workspace_user_aggregate(
        "distinct select on columns"
        distinct_on: [workspace_user_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [workspace_user_order_by!],
        "filter the rows returned"
        where: workspace_user_bool_exp
    ): workspace_user_aggregate!
    "fetch data from the table: \"workspace_user\" using primary key columns"
    workspace_user_by_pk(user_id: String!, workspace_id: uuid!): workspace_user
}

"columns and relationships of \"task\""
type task {
    created_at: timestamptz!
    deadline: timestamptz
    "An array relationship"
    direct_tasks(
        "distinct select on columns"
        distinct_on: [direct_task_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [direct_task_order_by!],
        "filter the rows returned"
        where: direct_task_bool_exp
    ): [direct_task!]!
    "An aggregate relationship"
    direct_tasks_aggregate(
        "distinct select on columns"
        distinct_on: [direct_task_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [direct_task_order_by!],
        "filter the rows returned"
        where: direct_task_bool_exp
    ): direct_task_aggregate!
    "An array relationship"
    group_tasks(
        "distinct select on columns"
        distinct_on: [group_task_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [group_task_order_by!],
        "filter the rows returned"
        where: group_task_bool_exp
    ): [group_task!]!
    "An aggregate relationship"
    group_tasks_aggregate(
        "distinct select on columns"
        distinct_on: [group_task_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [group_task_order_by!],
        "filter the rows returned"
        where: group_task_bool_exp
    ): group_task_aggregate!
    id: uuid!
    priority: Int!
    status: Boolean!
    text: String!
    "An object relationship"
    user: user!
    user_id: String!
}

"aggregated selection of \"task\""
type task_aggregate {
    aggregate: task_aggregate_fields
    nodes: [task!]!
}

"aggregate fields of \"task\""
type task_aggregate_fields {
    avg: task_avg_fields
    count(columns: [task_select_column!], distinct: Boolean): Int!
    max: task_max_fields
    min: task_min_fields
    stddev: task_stddev_fields
    stddev_pop: task_stddev_pop_fields
    stddev_samp: task_stddev_samp_fields
    sum: task_sum_fields
    var_pop: task_var_pop_fields
    var_samp: task_var_samp_fields
    variance: task_variance_fields
}

"aggregate avg on columns"
type task_avg_fields {
    priority: Float
}

"aggregate max on columns"
type task_max_fields {
    created_at: timestamptz
    deadline: timestamptz
    id: uuid
    priority: Int
    text: String
    user_id: String
}

"aggregate min on columns"
type task_min_fields {
    created_at: timestamptz
    deadline: timestamptz
    id: uuid
    priority: Int
    text: String
    user_id: String
}

"response of any mutation on the table \"task\""
type task_mutation_response {
    "number of rows affected by the mutation"
    affected_rows: Int!
    "data from the rows affected by the mutation"
    returning: [task!]!
}

"aggregate stddev on columns"
type task_stddev_fields {
    priority: Float
}

"aggregate stddev_pop on columns"
type task_stddev_pop_fields {
    priority: Float
}

"aggregate stddev_samp on columns"
type task_stddev_samp_fields {
    priority: Float
}

"aggregate sum on columns"
type task_sum_fields {
    priority: Int
}

"aggregate var_pop on columns"
type task_var_pop_fields {
    priority: Float
}

"aggregate var_samp on columns"
type task_var_samp_fields {
    priority: Float
}

"aggregate variance on columns"
type task_variance_fields {
    priority: Float
}

"columns and relationships of \"user\""
type user {
    "An array relationship"
    direct_workspace_users(
        "distinct select on columns"
        distinct_on: [direct_workspace_user_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [direct_workspace_user_order_by!],
        "filter the rows returned"
        where: direct_workspace_user_bool_exp
    ): [direct_workspace_user!]!
    "An aggregate relationship"
    direct_workspace_users_aggregate(
        "distinct select on columns"
        distinct_on: [direct_workspace_user_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [direct_workspace_user_order_by!],
        "filter the rows returned"
        where: direct_workspace_user_bool_exp
    ): direct_workspace_user_aggregate!
    "An array relationship"
    group_users(
        "distinct select on columns"
        distinct_on: [group_user_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [group_user_order_by!],
        "filter the rows returned"
        where: group_user_bool_exp
    ): [group_user!]!
    "An aggregate relationship"
    group_users_aggregate(
        "distinct select on columns"
        distinct_on: [group_user_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [group_user_order_by!],
        "filter the rows returned"
        where: group_user_bool_exp
    ): group_user_aggregate!
    name: String!
    "An array relationship"
    tasks(
        "distinct select on columns"
        distinct_on: [task_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [task_order_by!],
        "filter the rows returned"
        where: task_bool_exp
    ): [task!]!
    "An aggregate relationship"
    tasks_aggregate(
        "distinct select on columns"
        distinct_on: [task_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [task_order_by!],
        "filter the rows returned"
        where: task_bool_exp
    ): task_aggregate!
    uid: String!
    "An array relationship"
    workspace_users(
        "distinct select on columns"
        distinct_on: [workspace_user_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [workspace_user_order_by!],
        "filter the rows returned"
        where: workspace_user_bool_exp
    ): [workspace_user!]!
    "An aggregate relationship"
    workspace_users_aggregate(
        "distinct select on columns"
        distinct_on: [workspace_user_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [workspace_user_order_by!],
        "filter the rows returned"
        where: workspace_user_bool_exp
    ): workspace_user_aggregate!
    "An array relationship"
    workspaces(
        "distinct select on columns"
        distinct_on: [workspace_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [workspace_order_by!],
        "filter the rows returned"
        where: workspace_bool_exp
    ): [workspace!]!
    "An aggregate relationship"
    workspaces_aggregate(
        "distinct select on columns"
        distinct_on: [workspace_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [workspace_order_by!],
        "filter the rows returned"
        where: workspace_bool_exp
    ): workspace_aggregate!
}

"aggregated selection of \"user\""
type user_aggregate {
    aggregate: user_aggregate_fields
    nodes: [user!]!
}

"aggregate fields of \"user\""
type user_aggregate_fields {
    count(columns: [user_select_column!], distinct: Boolean): Int!
    max: user_max_fields
    min: user_min_fields
}

"aggregate max on columns"
type user_max_fields {
    name: String
    uid: String
}

"aggregate min on columns"
type user_min_fields {
    name: String
    uid: String
}

"response of any mutation on the table \"user\""
type user_mutation_response {
    "number of rows affected by the mutation"
    affected_rows: Int!
    "data from the rows affected by the mutation"
    returning: [user!]!
}

"columns and relationships of \"workspace\""
type workspace {
    "An array relationship"
    direct_workspace_users(
        "distinct select on columns"
        distinct_on: [direct_workspace_user_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [direct_workspace_user_order_by!],
        "filter the rows returned"
        where: direct_workspace_user_bool_exp
    ): [direct_workspace_user!]!
    "An aggregate relationship"
    direct_workspace_users_aggregate(
        "distinct select on columns"
        distinct_on: [direct_workspace_user_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [direct_workspace_user_order_by!],
        "filter the rows returned"
        where: direct_workspace_user_bool_exp
    ): direct_workspace_user_aggregate!
    "An array relationship"
    groups(
        "distinct select on columns"
        distinct_on: [group_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [group_order_by!],
        "filter the rows returned"
        where: group_bool_exp
    ): [group!]!
    "An aggregate relationship"
    groups_aggregate(
        "distinct select on columns"
        distinct_on: [group_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [group_order_by!],
        "filter the rows returned"
        where: group_bool_exp
    ): group_aggregate!
    id: uuid!
    name: String!
    "An object relationship"
    owner: user!
    owner_id: String!
    "An array relationship"
    workspace_users(
        "distinct select on columns"
        distinct_on: [workspace_user_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [workspace_user_order_by!],
        "filter the rows returned"
        where: workspace_user_bool_exp
    ): [workspace_user!]!
    "An aggregate relationship"
    workspace_users_aggregate(
        "distinct select on columns"
        distinct_on: [workspace_user_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [workspace_user_order_by!],
        "filter the rows returned"
        where: workspace_user_bool_exp
    ): workspace_user_aggregate!
}

"aggregated selection of \"workspace\""
type workspace_aggregate {
    aggregate: workspace_aggregate_fields
    nodes: [workspace!]!
}

"aggregate fields of \"workspace\""
type workspace_aggregate_fields {
    count(columns: [workspace_select_column!], distinct: Boolean): Int!
    max: workspace_max_fields
    min: workspace_min_fields
}

"aggregate max on columns"
type workspace_max_fields {
    id: uuid
    name: String
    owner_id: String
}

"aggregate min on columns"
type workspace_min_fields {
    id: uuid
    name: String
    owner_id: String
}

"response of any mutation on the table \"workspace\""
type workspace_mutation_response {
    "number of rows affected by the mutation"
    affected_rows: Int!
    "data from the rows affected by the mutation"
    returning: [workspace!]!
}

"columns and relationships of \"workspace_token\""
type workspace_token {
    expires_at: timestamptz
    id: uuid!
    "An object relationship"
    workspace: workspace!
    workspace_id: uuid!
}

"aggregated selection of \"workspace_token\""
type workspace_token_aggregate {
    aggregate: workspace_token_aggregate_fields
    nodes: [workspace_token!]!
}

"aggregate fields of \"workspace_token\""
type workspace_token_aggregate_fields {
    count(columns: [workspace_token_select_column!], distinct: Boolean): Int!
    max: workspace_token_max_fields
    min: workspace_token_min_fields
}

"aggregate max on columns"
type workspace_token_max_fields {
    expires_at: timestamptz
    id: uuid
    workspace_id: uuid
}

"aggregate min on columns"
type workspace_token_min_fields {
    expires_at: timestamptz
    id: uuid
    workspace_id: uuid
}

"response of any mutation on the table \"workspace_token\""
type workspace_token_mutation_response {
    "number of rows affected by the mutation"
    affected_rows: Int!
    "data from the rows affected by the mutation"
    returning: [workspace_token!]!
}

"columns and relationships of \"workspace_user\""
type workspace_user {
    "An object relationship"
    user: user!
    user_id: String!
    "An object relationship"
    workspace: workspace!
    workspace_id: uuid!
}

"aggregated selection of \"workspace_user\""
type workspace_user_aggregate {
    aggregate: workspace_user_aggregate_fields
    nodes: [workspace_user!]!
}

"aggregate fields of \"workspace_user\""
type workspace_user_aggregate_fields {
    count(columns: [workspace_user_select_column!], distinct: Boolean): Int!
    max: workspace_user_max_fields
    min: workspace_user_min_fields
}

"aggregate max on columns"
type workspace_user_max_fields {
    user_id: String
    workspace_id: uuid
}

"aggregate min on columns"
type workspace_user_min_fields {
    user_id: String
    workspace_id: uuid
}

"response of any mutation on the table \"workspace_user\""
type workspace_user_mutation_response {
    "number of rows affected by the mutation"
    affected_rows: Int!
    "data from the rows affected by the mutation"
    returning: [workspace_user!]!
}

"unique or primary key constraints on table \"direct\""
enum direct_constraint {
    "unique or primary key constraint"
    direct_pkey
}

"select columns of table \"direct\""
enum direct_select_column {
    "column name"
    id
}

"unique or primary key constraints on table \"direct_task\""
enum direct_task_constraint {
    "unique or primary key constraint"
    direct_task_pkey
}

"select columns of table \"direct_task\""
enum direct_task_select_column {
    "column name"
    direct_id
    "column name"
    task_id
}

"update columns of table \"direct_task\""
enum direct_task_update_column {
    "column name"
    direct_id
    "column name"
    task_id
}

"update columns of table \"direct\""
enum direct_update_column {
    "column name"
    id
}

"unique or primary key constraints on table \"direct_workspace_user\""
enum direct_workspace_user_constraint {
    "unique or primary key constraint"
    direct_workspace_user_pkey
}

"select columns of table \"direct_workspace_user\""
enum direct_workspace_user_select_column {
    "column name"
    direct_id
    "column name"
    user_id_1
    "column name"
    user_id_2
    "column name"
    workspace_id
}

"update columns of table \"direct_workspace_user\""
enum direct_workspace_user_update_column {
    "column name"
    direct_id
    "column name"
    user_id_1
    "column name"
    user_id_2
    "column name"
    workspace_id
}

"unique or primary key constraints on table \"group\""
enum group_constraint {
    "unique or primary key constraint"
    group_pkey
}

"select columns of table \"group\""
enum group_select_column {
    "column name"
    id
    "column name"
    name
    "column name"
    workspace_id
}

"unique or primary key constraints on table \"group_task\""
enum group_task_constraint {
    "unique or primary key constraint"
    group_task_pkey
}

"select columns of table \"group_task\""
enum group_task_select_column {
    "column name"
    group_id
    "column name"
    task_id
}

"update columns of table \"group_task\""
enum group_task_update_column {
    "column name"
    group_id
    "column name"
    task_id
}

"update columns of table \"group\""
enum group_update_column {
    "column name"
    id
    "column name"
    name
    "column name"
    workspace_id
}

"unique or primary key constraints on table \"group_user\""
enum group_user_constraint {
    "unique or primary key constraint"
    group_user_pkey
}

"select columns of table \"group_user\""
enum group_user_select_column {
    "column name"
    group_id
    "column name"
    user_id
}

"update columns of table \"group_user\""
enum group_user_update_column {
    "column name"
    group_id
    "column name"
    user_id
}

"column ordering options"
enum order_by {
    "in ascending order, nulls last"
    asc
    "in ascending order, nulls first"
    asc_nulls_first
    "in ascending order, nulls last"
    asc_nulls_last
    "in descending order, nulls first"
    desc
    "in descending order, nulls first"
    desc_nulls_first
    "in descending order, nulls last"
    desc_nulls_last
}

"unique or primary key constraints on table \"task\""
enum task_constraint {
    "unique or primary key constraint"
    task_pkey
}

"select columns of table \"task\""
enum task_select_column {
    "column name"
    created_at
    "column name"
    deadline
    "column name"
    id
    "column name"
    priority
    "column name"
    status
    "column name"
    text
    "column name"
    user_id
}

"update columns of table \"task\""
enum task_update_column {
    "column name"
    created_at
    "column name"
    deadline
    "column name"
    id
    "column name"
    priority
    "column name"
    status
    "column name"
    text
    "column name"
    user_id
}

"unique or primary key constraints on table \"user\""
enum user_constraint {
    "unique or primary key constraint"
    users_pkey
}

"select columns of table \"user\""
enum user_select_column {
    "column name"
    name
    "column name"
    uid
}

"update columns of table \"user\""
enum user_update_column {
    "column name"
    name
    "column name"
    uid
}

"unique or primary key constraints on table \"workspace\""
enum workspace_constraint {
    "unique or primary key constraint"
    workspace_pkey
}

"select columns of table \"workspace\""
enum workspace_select_column {
    "column name"
    id
    "column name"
    name
    "column name"
    owner_id
}

"unique or primary key constraints on table \"workspace_token\""
enum workspace_token_constraint {
    "unique or primary key constraint"
    token_pkey
}

"select columns of table \"workspace_token\""
enum workspace_token_select_column {
    "column name"
    expires_at
    "column name"
    id
    "column name"
    workspace_id
}

"update columns of table \"workspace_token\""
enum workspace_token_update_column {
    "column name"
    expires_at
    "column name"
    id
    "column name"
    workspace_id
}

"update columns of table \"workspace\""
enum workspace_update_column {
    "column name"
    id
    "column name"
    name
    "column name"
    owner_id
}

"unique or primary key constraints on table \"workspace_user\""
enum workspace_user_constraint {
    "unique or primary key constraint"
    workspace_user_pkey
}

"select columns of table \"workspace_user\""
enum workspace_user_select_column {
    "column name"
    user_id
    "column name"
    workspace_id
}

"update columns of table \"workspace_user\""
enum workspace_user_update_column {
    "column name"
    user_id
    "column name"
    workspace_id
}

"Boolean expression to compare columns of type \"Boolean\". All fields are combined with logical 'AND'."
input Boolean_comparison_exp {
    _eq: Boolean
    _gt: Boolean
    _gte: Boolean
    _in: [Boolean!]
    _is_null: Boolean
    _lt: Boolean
    _lte: Boolean
    _neq: Boolean
    _nin: [Boolean!]
}

"Boolean expression to compare columns of type \"Int\". All fields are combined with logical 'AND'."
input Int_comparison_exp {
    _eq: Int
    _gt: Int
    _gte: Int
    _in: [Int!]
    _is_null: Boolean
    _lt: Int
    _lte: Int
    _neq: Int
    _nin: [Int!]
}

"Boolean expression to compare columns of type \"String\". All fields are combined with logical 'AND'."
input String_comparison_exp {
    _eq: String
    _gt: String
    _gte: String
    "does the column match the given case-insensitive pattern"
    _ilike: String
    _in: [String!]
    "does the column match the given POSIX regular expression, case insensitive"
    _iregex: String
    _is_null: Boolean
    "does the column match the given pattern"
    _like: String
    _lt: String
    _lte: String
    _neq: String
    "does the column NOT match the given case-insensitive pattern"
    _nilike: String
    _nin: [String!]
    "does the column NOT match the given POSIX regular expression, case insensitive"
    _niregex: String
    "does the column NOT match the given pattern"
    _nlike: String
    "does the column NOT match the given POSIX regular expression, case sensitive"
    _nregex: String
    "does the column NOT match the given SQL regular expression"
    _nsimilar: String
    "does the column match the given POSIX regular expression, case sensitive"
    _regex: String
    "does the column match the given SQL regular expression"
    _similar: String
}

"Boolean expression to filter rows from the table \"direct\". All fields are combined with a logical 'AND'."
input direct_bool_exp {
    _and: [direct_bool_exp!]
    _not: direct_bool_exp
    _or: [direct_bool_exp!]
    direct_tasks: direct_task_bool_exp
    direct_workspace_users: direct_workspace_user_bool_exp
    id: uuid_comparison_exp
}

"input type for inserting data into table \"direct\""
input direct_insert_input {
    direct_tasks: direct_task_arr_rel_insert_input
    direct_workspace_users: direct_workspace_user_arr_rel_insert_input
    id: uuid
}

"input type for inserting object relation for remote table \"direct\""
input direct_obj_rel_insert_input {
    data: direct_insert_input!
    "on conflict condition"
    on_conflict: direct_on_conflict
}

"on conflict condition type for table \"direct\""
input direct_on_conflict {
    constraint: direct_constraint!
    update_columns: [direct_update_column!]! = []
    where: direct_bool_exp
}

"Ordering options when selecting data from \"direct\"."
input direct_order_by {
    direct_tasks_aggregate: direct_task_aggregate_order_by
    direct_workspace_users_aggregate: direct_workspace_user_aggregate_order_by
    id: order_by
}

"primary key columns input for table: direct"
input direct_pk_columns_input {
    id: uuid!
}

"input type for updating data in table \"direct\""
input direct_set_input {
    id: uuid
}

"order by aggregate values of table \"direct_task\""
input direct_task_aggregate_order_by {
    count: order_by
    max: direct_task_max_order_by
    min: direct_task_min_order_by
}

"input type for inserting array relation for remote table \"direct_task\""
input direct_task_arr_rel_insert_input {
    data: [direct_task_insert_input!]!
    "on conflict condition"
    on_conflict: direct_task_on_conflict
}

"Boolean expression to filter rows from the table \"direct_task\". All fields are combined with a logical 'AND'."
input direct_task_bool_exp {
    _and: [direct_task_bool_exp!]
    _not: direct_task_bool_exp
    _or: [direct_task_bool_exp!]
    direct: direct_bool_exp
    direct_id: uuid_comparison_exp
    task: task_bool_exp
    task_id: uuid_comparison_exp
}

"input type for inserting data into table \"direct_task\""
input direct_task_insert_input {
    direct: direct_obj_rel_insert_input
    direct_id: uuid
    task: task_obj_rel_insert_input
    task_id: uuid
}

"order by max() on columns of table \"direct_task\""
input direct_task_max_order_by {
    direct_id: order_by
    task_id: order_by
}

"order by min() on columns of table \"direct_task\""
input direct_task_min_order_by {
    direct_id: order_by
    task_id: order_by
}

"on conflict condition type for table \"direct_task\""
input direct_task_on_conflict {
    constraint: direct_task_constraint!
    update_columns: [direct_task_update_column!]! = []
    where: direct_task_bool_exp
}

"Ordering options when selecting data from \"direct_task\"."
input direct_task_order_by {
    direct: direct_order_by
    direct_id: order_by
    task: task_order_by
    task_id: order_by
}

"primary key columns input for table: direct_task"
input direct_task_pk_columns_input {
    direct_id: uuid!
    task_id: uuid!
}

"input type for updating data in table \"direct_task\""
input direct_task_set_input {
    direct_id: uuid
    task_id: uuid
}

"order by aggregate values of table \"direct_workspace_user\""
input direct_workspace_user_aggregate_order_by {
    count: order_by
    max: direct_workspace_user_max_order_by
    min: direct_workspace_user_min_order_by
}

"input type for inserting array relation for remote table \"direct_workspace_user\""
input direct_workspace_user_arr_rel_insert_input {
    data: [direct_workspace_user_insert_input!]!
    "on conflict condition"
    on_conflict: direct_workspace_user_on_conflict
}

"Boolean expression to filter rows from the table \"direct_workspace_user\". All fields are combined with a logical 'AND'."
input direct_workspace_user_bool_exp {
    _and: [direct_workspace_user_bool_exp!]
    _not: direct_workspace_user_bool_exp
    _or: [direct_workspace_user_bool_exp!]
    direct: direct_bool_exp
    direct_id: uuid_comparison_exp
    user_1: user_bool_exp
    user_2: user_bool_exp
    user_id_1: String_comparison_exp
    user_id_2: String_comparison_exp
    workspace: workspace_bool_exp
    workspace_id: uuid_comparison_exp
}

"input type for inserting data into table \"direct_workspace_user\""
input direct_workspace_user_insert_input {
    direct: direct_obj_rel_insert_input
    direct_id: uuid
    user_1: user_obj_rel_insert_input
    user_2: user_obj_rel_insert_input
    user_id_1: String
    user_id_2: String
    workspace: workspace_obj_rel_insert_input
    workspace_id: uuid
}

"order by max() on columns of table \"direct_workspace_user\""
input direct_workspace_user_max_order_by {
    direct_id: order_by
    user_id_1: order_by
    user_id_2: order_by
    workspace_id: order_by
}

"order by min() on columns of table \"direct_workspace_user\""
input direct_workspace_user_min_order_by {
    direct_id: order_by
    user_id_1: order_by
    user_id_2: order_by
    workspace_id: order_by
}

"on conflict condition type for table \"direct_workspace_user\""
input direct_workspace_user_on_conflict {
    constraint: direct_workspace_user_constraint!
    update_columns: [direct_workspace_user_update_column!]! = []
    where: direct_workspace_user_bool_exp
}

"Ordering options when selecting data from \"direct_workspace_user\"."
input direct_workspace_user_order_by {
    direct: direct_order_by
    direct_id: order_by
    user_1: user_order_by
    user_2: user_order_by
    user_id_1: order_by
    user_id_2: order_by
    workspace: workspace_order_by
    workspace_id: order_by
}

"primary key columns input for table: direct_workspace_user"
input direct_workspace_user_pk_columns_input {
    user_id_1: String!
    user_id_2: String!
    workspace_id: uuid!
}

"input type for updating data in table \"direct_workspace_user\""
input direct_workspace_user_set_input {
    direct_id: uuid
    user_id_1: String
    user_id_2: String
    workspace_id: uuid
}

"order by aggregate values of table \"group\""
input group_aggregate_order_by {
    count: order_by
    max: group_max_order_by
    min: group_min_order_by
}

"input type for inserting array relation for remote table \"group\""
input group_arr_rel_insert_input {
    data: [group_insert_input!]!
    "on conflict condition"
    on_conflict: group_on_conflict
}

"Boolean expression to filter rows from the table \"group\". All fields are combined with a logical 'AND'."
input group_bool_exp {
    _and: [group_bool_exp!]
    _not: group_bool_exp
    _or: [group_bool_exp!]
    group_tasks: group_task_bool_exp
    group_users: group_user_bool_exp
    id: uuid_comparison_exp
    name: String_comparison_exp
    workspace: workspace_bool_exp
    workspace_id: uuid_comparison_exp
}

"input type for inserting data into table \"group\""
input group_insert_input {
    group_tasks: group_task_arr_rel_insert_input
    group_users: group_user_arr_rel_insert_input
    id: uuid
    name: String
    workspace: workspace_obj_rel_insert_input
    workspace_id: uuid
}

"order by max() on columns of table \"group\""
input group_max_order_by {
    id: order_by
    name: order_by
    workspace_id: order_by
}

"order by min() on columns of table \"group\""
input group_min_order_by {
    id: order_by
    name: order_by
    workspace_id: order_by
}

"input type for inserting object relation for remote table \"group\""
input group_obj_rel_insert_input {
    data: group_insert_input!
    "on conflict condition"
    on_conflict: group_on_conflict
}

"on conflict condition type for table \"group\""
input group_on_conflict {
    constraint: group_constraint!
    update_columns: [group_update_column!]! = []
    where: group_bool_exp
}

"Ordering options when selecting data from \"group\"."
input group_order_by {
    group_tasks_aggregate: group_task_aggregate_order_by
    group_users_aggregate: group_user_aggregate_order_by
    id: order_by
    name: order_by
    workspace: workspace_order_by
    workspace_id: order_by
}

"primary key columns input for table: group"
input group_pk_columns_input {
    id: uuid!
}

"input type for updating data in table \"group\""
input group_set_input {
    id: uuid
    name: String
    workspace_id: uuid
}

"order by aggregate values of table \"group_task\""
input group_task_aggregate_order_by {
    count: order_by
    max: group_task_max_order_by
    min: group_task_min_order_by
}

"input type for inserting array relation for remote table \"group_task\""
input group_task_arr_rel_insert_input {
    data: [group_task_insert_input!]!
    "on conflict condition"
    on_conflict: group_task_on_conflict
}

"Boolean expression to filter rows from the table \"group_task\". All fields are combined with a logical 'AND'."
input group_task_bool_exp {
    _and: [group_task_bool_exp!]
    _not: group_task_bool_exp
    _or: [group_task_bool_exp!]
    group: group_bool_exp
    group_id: uuid_comparison_exp
    task: task_bool_exp
    task_id: uuid_comparison_exp
}

"input type for inserting data into table \"group_task\""
input group_task_insert_input {
    group: group_obj_rel_insert_input
    group_id: uuid
    task: task_obj_rel_insert_input
    task_id: uuid
}

"order by max() on columns of table \"group_task\""
input group_task_max_order_by {
    group_id: order_by
    task_id: order_by
}

"order by min() on columns of table \"group_task\""
input group_task_min_order_by {
    group_id: order_by
    task_id: order_by
}

"on conflict condition type for table \"group_task\""
input group_task_on_conflict {
    constraint: group_task_constraint!
    update_columns: [group_task_update_column!]! = []
    where: group_task_bool_exp
}

"Ordering options when selecting data from \"group_task\"."
input group_task_order_by {
    group: group_order_by
    group_id: order_by
    task: task_order_by
    task_id: order_by
}

"primary key columns input for table: group_task"
input group_task_pk_columns_input {
    group_id: uuid!
    task_id: uuid!
}

"input type for updating data in table \"group_task\""
input group_task_set_input {
    group_id: uuid
    task_id: uuid
}

"order by aggregate values of table \"group_user\""
input group_user_aggregate_order_by {
    count: order_by
    max: group_user_max_order_by
    min: group_user_min_order_by
}

"input type for inserting array relation for remote table \"group_user\""
input group_user_arr_rel_insert_input {
    data: [group_user_insert_input!]!
    "on conflict condition"
    on_conflict: group_user_on_conflict
}

"Boolean expression to filter rows from the table \"group_user\". All fields are combined with a logical 'AND'."
input group_user_bool_exp {
    _and: [group_user_bool_exp!]
    _not: group_user_bool_exp
    _or: [group_user_bool_exp!]
    group: group_bool_exp
    group_id: uuid_comparison_exp
    user: user_bool_exp
    user_id: String_comparison_exp
}

"input type for inserting data into table \"group_user\""
input group_user_insert_input {
    group: group_obj_rel_insert_input
    group_id: uuid
    user: user_obj_rel_insert_input
    user_id: String
}

"order by max() on columns of table \"group_user\""
input group_user_max_order_by {
    group_id: order_by
    user_id: order_by
}

"order by min() on columns of table \"group_user\""
input group_user_min_order_by {
    group_id: order_by
    user_id: order_by
}

"on conflict condition type for table \"group_user\""
input group_user_on_conflict {
    constraint: group_user_constraint!
    update_columns: [group_user_update_column!]! = []
    where: group_user_bool_exp
}

"Ordering options when selecting data from \"group_user\"."
input group_user_order_by {
    group: group_order_by
    group_id: order_by
    user: user_order_by
    user_id: order_by
}

"primary key columns input for table: group_user"
input group_user_pk_columns_input {
    group_id: uuid!
    user_id: String!
}

"input type for updating data in table \"group_user\""
input group_user_set_input {
    group_id: uuid
    user_id: String
}

"order by aggregate values of table \"task\""
input task_aggregate_order_by {
    avg: task_avg_order_by
    count: order_by
    max: task_max_order_by
    min: task_min_order_by
    stddev: task_stddev_order_by
    stddev_pop: task_stddev_pop_order_by
    stddev_samp: task_stddev_samp_order_by
    sum: task_sum_order_by
    var_pop: task_var_pop_order_by
    var_samp: task_var_samp_order_by
    variance: task_variance_order_by
}

"input type for inserting array relation for remote table \"task\""
input task_arr_rel_insert_input {
    data: [task_insert_input!]!
    "on conflict condition"
    on_conflict: task_on_conflict
}

"order by avg() on columns of table \"task\""
input task_avg_order_by {
    priority: order_by
}

"Boolean expression to filter rows from the table \"task\". All fields are combined with a logical 'AND'."
input task_bool_exp {
    _and: [task_bool_exp!]
    _not: task_bool_exp
    _or: [task_bool_exp!]
    created_at: timestamptz_comparison_exp
    deadline: timestamptz_comparison_exp
    direct_tasks: direct_task_bool_exp
    group_tasks: group_task_bool_exp
    id: uuid_comparison_exp
    priority: Int_comparison_exp
    status: Boolean_comparison_exp
    text: String_comparison_exp
    user: user_bool_exp
    user_id: String_comparison_exp
}

"input type for incrementing numeric columns in table \"task\""
input task_inc_input {
    priority: Int
}

"input type for inserting data into table \"task\""
input task_insert_input {
    created_at: timestamptz
    deadline: timestamptz
    direct_tasks: direct_task_arr_rel_insert_input
    group_tasks: group_task_arr_rel_insert_input
    id: uuid
    priority: Int
    status: Boolean
    text: String
    user: user_obj_rel_insert_input
    user_id: String
}

"order by max() on columns of table \"task\""
input task_max_order_by {
    created_at: order_by
    deadline: order_by
    id: order_by
    priority: order_by
    text: order_by
    user_id: order_by
}

"order by min() on columns of table \"task\""
input task_min_order_by {
    created_at: order_by
    deadline: order_by
    id: order_by
    priority: order_by
    text: order_by
    user_id: order_by
}

"input type for inserting object relation for remote table \"task\""
input task_obj_rel_insert_input {
    data: task_insert_input!
    "on conflict condition"
    on_conflict: task_on_conflict
}

"on conflict condition type for table \"task\""
input task_on_conflict {
    constraint: task_constraint!
    update_columns: [task_update_column!]! = []
    where: task_bool_exp
}

"Ordering options when selecting data from \"task\"."
input task_order_by {
    created_at: order_by
    deadline: order_by
    direct_tasks_aggregate: direct_task_aggregate_order_by
    group_tasks_aggregate: group_task_aggregate_order_by
    id: order_by
    priority: order_by
    status: order_by
    text: order_by
    user: user_order_by
    user_id: order_by
}

"primary key columns input for table: task"
input task_pk_columns_input {
    id: uuid!
}

"input type for updating data in table \"task\""
input task_set_input {
    created_at: timestamptz
    deadline: timestamptz
    id: uuid
    priority: Int
    status: Boolean
    text: String
    user_id: String
}

"order by stddev() on columns of table \"task\""
input task_stddev_order_by {
    priority: order_by
}

"order by stddev_pop() on columns of table \"task\""
input task_stddev_pop_order_by {
    priority: order_by
}

"order by stddev_samp() on columns of table \"task\""
input task_stddev_samp_order_by {
    priority: order_by
}

"order by sum() on columns of table \"task\""
input task_sum_order_by {
    priority: order_by
}

"order by var_pop() on columns of table \"task\""
input task_var_pop_order_by {
    priority: order_by
}

"order by var_samp() on columns of table \"task\""
input task_var_samp_order_by {
    priority: order_by
}

"order by variance() on columns of table \"task\""
input task_variance_order_by {
    priority: order_by
}

"Boolean expression to compare columns of type \"timestamptz\". All fields are combined with logical 'AND'."
input timestamptz_comparison_exp {
    _eq: timestamptz
    _gt: timestamptz
    _gte: timestamptz
    _in: [timestamptz!]
    _is_null: Boolean
    _lt: timestamptz
    _lte: timestamptz
    _neq: timestamptz
    _nin: [timestamptz!]
}

"Boolean expression to filter rows from the table \"user\". All fields are combined with a logical 'AND'."
input user_bool_exp {
    _and: [user_bool_exp!]
    _not: user_bool_exp
    _or: [user_bool_exp!]
    direct_workspace_users: direct_workspace_user_bool_exp
    group_users: group_user_bool_exp
    name: String_comparison_exp
    tasks: task_bool_exp
    uid: String_comparison_exp
    workspace_users: workspace_user_bool_exp
    workspaces: workspace_bool_exp
}

"input type for inserting data into table \"user\""
input user_insert_input {
    direct_workspace_users: direct_workspace_user_arr_rel_insert_input
    group_users: group_user_arr_rel_insert_input
    name: String
    tasks: task_arr_rel_insert_input
    uid: String
    workspace_users: workspace_user_arr_rel_insert_input
    workspaces: workspace_arr_rel_insert_input
}

"input type for inserting object relation for remote table \"user\""
input user_obj_rel_insert_input {
    data: user_insert_input!
    "on conflict condition"
    on_conflict: user_on_conflict
}

"on conflict condition type for table \"user\""
input user_on_conflict {
    constraint: user_constraint!
    update_columns: [user_update_column!]! = []
    where: user_bool_exp
}

"Ordering options when selecting data from \"user\"."
input user_order_by {
    direct_workspace_users_aggregate: direct_workspace_user_aggregate_order_by
    group_users_aggregate: group_user_aggregate_order_by
    name: order_by
    tasks_aggregate: task_aggregate_order_by
    uid: order_by
    workspace_users_aggregate: workspace_user_aggregate_order_by
    workspaces_aggregate: workspace_aggregate_order_by
}

"primary key columns input for table: user"
input user_pk_columns_input {
    uid: String!
}

"input type for updating data in table \"user\""
input user_set_input {
    name: String
    uid: String
}

"Boolean expression to compare columns of type \"uuid\". All fields are combined with logical 'AND'."
input uuid_comparison_exp {
    _eq: uuid
    _gt: uuid
    _gte: uuid
    _in: [uuid!]
    _is_null: Boolean
    _lt: uuid
    _lte: uuid
    _neq: uuid
    _nin: [uuid!]
}

"order by aggregate values of table \"workspace\""
input workspace_aggregate_order_by {
    count: order_by
    max: workspace_max_order_by
    min: workspace_min_order_by
}

"input type for inserting array relation for remote table \"workspace\""
input workspace_arr_rel_insert_input {
    data: [workspace_insert_input!]!
    "on conflict condition"
    on_conflict: workspace_on_conflict
}

"Boolean expression to filter rows from the table \"workspace\". All fields are combined with a logical 'AND'."
input workspace_bool_exp {
    _and: [workspace_bool_exp!]
    _not: workspace_bool_exp
    _or: [workspace_bool_exp!]
    direct_workspace_users: direct_workspace_user_bool_exp
    groups: group_bool_exp
    id: uuid_comparison_exp
    name: String_comparison_exp
    owner: user_bool_exp
    owner_id: String_comparison_exp
    workspace_users: workspace_user_bool_exp
}

"input type for inserting data into table \"workspace\""
input workspace_insert_input {
    direct_workspace_users: direct_workspace_user_arr_rel_insert_input
    groups: group_arr_rel_insert_input
    id: uuid
    name: String
    owner: user_obj_rel_insert_input
    owner_id: String
    workspace_users: workspace_user_arr_rel_insert_input
}

"order by max() on columns of table \"workspace\""
input workspace_max_order_by {
    id: order_by
    name: order_by
    owner_id: order_by
}

"order by min() on columns of table \"workspace\""
input workspace_min_order_by {
    id: order_by
    name: order_by
    owner_id: order_by
}

"input type for inserting object relation for remote table \"workspace\""
input workspace_obj_rel_insert_input {
    data: workspace_insert_input!
    "on conflict condition"
    on_conflict: workspace_on_conflict
}

"on conflict condition type for table \"workspace\""
input workspace_on_conflict {
    constraint: workspace_constraint!
    update_columns: [workspace_update_column!]! = []
    where: workspace_bool_exp
}

"Ordering options when selecting data from \"workspace\"."
input workspace_order_by {
    direct_workspace_users_aggregate: direct_workspace_user_aggregate_order_by
    groups_aggregate: group_aggregate_order_by
    id: order_by
    name: order_by
    owner: user_order_by
    owner_id: order_by
    workspace_users_aggregate: workspace_user_aggregate_order_by
}

"primary key columns input for table: workspace"
input workspace_pk_columns_input {
    id: uuid!
}

"input type for updating data in table \"workspace\""
input workspace_set_input {
    id: uuid
    name: String
    owner_id: String
}

"Boolean expression to filter rows from the table \"workspace_token\". All fields are combined with a logical 'AND'."
input workspace_token_bool_exp {
    _and: [workspace_token_bool_exp!]
    _not: workspace_token_bool_exp
    _or: [workspace_token_bool_exp!]
    expires_at: timestamptz_comparison_exp
    id: uuid_comparison_exp
    workspace: workspace_bool_exp
    workspace_id: uuid_comparison_exp
}

"input type for inserting data into table \"workspace_token\""
input workspace_token_insert_input {
    expires_at: timestamptz
    id: uuid
    workspace: workspace_obj_rel_insert_input
    workspace_id: uuid
}

"on conflict condition type for table \"workspace_token\""
input workspace_token_on_conflict {
    constraint: workspace_token_constraint!
    update_columns: [workspace_token_update_column!]! = []
    where: workspace_token_bool_exp
}

"Ordering options when selecting data from \"workspace_token\"."
input workspace_token_order_by {
    expires_at: order_by
    id: order_by
    workspace: workspace_order_by
    workspace_id: order_by
}

"primary key columns input for table: workspace_token"
input workspace_token_pk_columns_input {
    id: uuid!
}

"input type for updating data in table \"workspace_token\""
input workspace_token_set_input {
    expires_at: timestamptz
    id: uuid
    workspace_id: uuid
}

"order by aggregate values of table \"workspace_user\""
input workspace_user_aggregate_order_by {
    count: order_by
    max: workspace_user_max_order_by
    min: workspace_user_min_order_by
}

"input type for inserting array relation for remote table \"workspace_user\""
input workspace_user_arr_rel_insert_input {
    data: [workspace_user_insert_input!]!
    "on conflict condition"
    on_conflict: workspace_user_on_conflict
}

"Boolean expression to filter rows from the table \"workspace_user\". All fields are combined with a logical 'AND'."
input workspace_user_bool_exp {
    _and: [workspace_user_bool_exp!]
    _not: workspace_user_bool_exp
    _or: [workspace_user_bool_exp!]
    user: user_bool_exp
    user_id: String_comparison_exp
    workspace: workspace_bool_exp
    workspace_id: uuid_comparison_exp
}

"input type for inserting data into table \"workspace_user\""
input workspace_user_insert_input {
    user: user_obj_rel_insert_input
    user_id: String
    workspace: workspace_obj_rel_insert_input
    workspace_id: uuid
}

"order by max() on columns of table \"workspace_user\""
input workspace_user_max_order_by {
    user_id: order_by
    workspace_id: order_by
}

"order by min() on columns of table \"workspace_user\""
input workspace_user_min_order_by {
    user_id: order_by
    workspace_id: order_by
}

"on conflict condition type for table \"workspace_user\""
input workspace_user_on_conflict {
    constraint: workspace_user_constraint!
    update_columns: [workspace_user_update_column!]! = []
    where: workspace_user_bool_exp
}

"Ordering options when selecting data from \"workspace_user\"."
input workspace_user_order_by {
    user: user_order_by
    user_id: order_by
    workspace: workspace_order_by
    workspace_id: order_by
}

"primary key columns input for table: workspace_user"
input workspace_user_pk_columns_input {
    user_id: String!
    workspace_id: uuid!
}

"input type for updating data in table \"workspace_user\""
input workspace_user_set_input {
    user_id: String
    workspace_id: uuid
}


scalar timestamptz

scalar uuid